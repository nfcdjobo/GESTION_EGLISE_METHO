<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;
use App\Models\User;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Facades\DB;

class FixPasswordHashing extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'auth:fix-passwords {--dry-run : Run without making changes}';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Fix password hashing for existing users';

    /**
     * Execute the console command.
     */
    public function handle()
    {
        $dryRun = $this->option('dry-run');

        if ($dryRun) {
            $this->info('üîç Mode test activ√© - Aucune modification ne sera apport√©e');
        } else {
            $this->warn('‚ö†Ô∏è  Mode r√©el - Les mots de passe seront modifi√©s');
            if (!$this->confirm('Voulez-vous continuer ?')) {
                $this->info('Op√©ration annul√©e');
                return;
            }
        }

        $this->info('üîç Recherche des utilisateurs avec des mots de passe non-hach√©s...');

        // R√©cup√©rer tous les utilisateurs
        $users = User::all();
        $fixedCount = 0;
        $errorCount = 0;
        $alreadyHashedCount = 0;

        foreach ($users as $user) {
            try {
                // V√©rifier si le mot de passe est d√©j√† hach√© avec bcrypt
                if ($this->isBcryptHash($user->password)) {
                    $alreadyHashedCount++;
                    $this->line("‚úÖ {$user->email} - D√©j√† hach√© correctement");
                    continue;
                }

                if ($dryRun) {
                    $this->warn("üîß {$user->email} - N√©cessite un nouveau hachage");
                    $fixedCount++;
                } else {
                    // Si le mot de passe n'est pas hach√© ou utilise un autre algorithme
                    // On va cr√©er un mot de passe temporaire s√©curis√©
                    $tempPassword = $this->generateTemporaryPassword();

                    // Hacher le nouveau mot de passe
                    $user->password = Hash::make($tempPassword);
                    $user->save();

                    $this->warn("üîß {$user->email} - Mot de passe r√©initialis√© : {$tempPassword}");
                    $this->warn("   ‚ö†Ô∏è  L'utilisateur devra changer son mot de passe √† la prochaine connexion");

                    $fixedCount++;
                }

            } catch (\Exception $e) {
                $this->error("‚ùå Erreur pour {$user->email}: " . $e->getMessage());
                $errorCount++;
            }
        }

        // R√©sum√©
        $this->info("\nüìä R√©sum√© :");
        $this->info("   Total d'utilisateurs : " . $users->count());
        $this->info("   D√©j√† hach√©s correctement : {$alreadyHashedCount}");
        $this->info("   " . ($dryRun ? '√Ä corriger' : 'Corrig√©s') . " : {$fixedCount}");
        $this->info("   Erreurs : {$errorCount}");

        if (!$dryRun && $fixedCount > 0) {
            $this->warn("\n‚ö†Ô∏è  IMPORTANT :");
            $this->warn("   Les utilisateurs avec des mots de passe r√©initialis√©s doivent :");
            $this->warn("   1. Utiliser leur nouveau mot de passe temporaire pour se connecter");
            $this->warn("   2. Changer imm√©diatement leur mot de passe via leur profil");
            $this->warn("   3. Ou utiliser la fonction 'Mot de passe oubli√©'");
        }

        if ($dryRun && $fixedCount > 0) {
            $this->info("\nüí° Pour appliquer les corrections, ex√©cutez :");
            $this->info("   php artisan auth:fix-passwords");
        }
    }

    /**
     * V√©rifier si une cha√Æne est un hash bcrypt
     */
    private function isBcryptHash($password)
    {
        // Un hash bcrypt commence par $2y$ et fait 60 caract√®res
        return is_string($password) &&
               strlen($password) === 60 &&
               substr($password, 0, 4) === '$2y$';
    }

    /**
     * G√©n√©rer un mot de passe temporaire s√©curis√©
     */
    private function generateTemporaryPassword()
    {
        // G√©n√©rer un mot de passe de 12 caract√®res avec lettres, chiffres et symboles
        $characters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*';
        $password = '';

        for ($i = 0; $i < 12; $i++) {
            $password .= $characters[random_int(0, strlen($characters) - 1)];
        }

        return $password;
    }
}
